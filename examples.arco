#pin blePeripheral(2, INPUT);                     // BLE Peripheral Device (the board you're programming)
#pin blePeripheral(2, OUTPUT);

#pin ledPin (8 , OUTPUT);
#pin buttonPin (12, INPUT);
mut num buttonState = 0;

task () every 1000 {
    digitalWrite(ledPin, HIGH);
    sleeps(500);
    digitalWrite(ledPin, LOW);
    sleeps(500);
}
task (num buttonState) when (buttonPin) {
    buttonState = 1;
    println(buttonState);
    sleeps(1);
}

// Constant and variables declaration:
// Face orientation and shake functions:
num lastOrientation = -1 - 2;              // previous orientation (for comparison)
num previousMillis = 0;

num interval = 2000;          // time to wait in up position before the face activation
num SHAKEpreviousMillis = 0;  // last time update
num SHAKEinterval = 2000;     // time to wait during shaking for face deactivation
bool keep = false;                   // this is used to count only one time the face orientation change
num lastFUNCTION = -1;                  // this is used to know what is the previous rientation

// Faces initilization: at the beginning every face is false
bool face0 = false;
bool face1 = false;
bool face2 = false;
bool face3 = false;
bool face4 = false;
bool face5 = false;

// LIGHTS face
mut num LEDlights =  11;   // pin 11: yellow led

// TEMPERATURE face
mut num pinTemp = 0;      // pin A0: temperature sensor
mut num LEDhot =  12;      // pin 12: red led
mut num LEDcold =  13;     // pin 13: blue led
  // temperature value memorization
num B=3975;                  // B value of the thermistor
// resistance value memorization
num tooHot = 260;         // temperature at which the air conditioner is activated [SET]
num tooCold = 230;        // temperature at which the heater is activated [SET]

// TIMER face
num BUZZER = 3;              // pin 3: buzzer
bool KEEPtime = false;    // this is used to count only one time the face orientation change (not restart while counting)
num TIMERmillis = 0;         // the following are for the countdown determination
num prevSHOWsecond = 0;
num CountdownInMillis = 0;
num SHOWmillis = 0;          // millis value calculation result
num SHOWminute = 0;          // minutes value to show in the monitor for the countdown
num SHOWseconds = 0;         // seconds value to show in the monitor for the countdown
mut num SETminute =  2;    // set 2 minute timer [SET]
mut num SETsecond =  30;   // set 30 seconds timer [SET]

// SOUND face
mut num soundLED = 9 ;     // pin 9: green led
mut num soundSENSOR = 1;  // pin A0: sound sensor
num brightness = 0;          // green led brightness initialization

// TV face
mut num ROWS = 4;         // four rows keypad
mut num COLS = 3;

num[] keys = ["1","2","3"];

char keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );  // keypad initialization



// OFF face
mut num LEDOFF =  2;      // pin A2: red led


num setupp() {

  pinMode(LEDlights, OUTPUTa); // every led is set as an output
  pinMode(LEDhot, OUTPUaT);
  pinMode(LEDcold, OUTPUaT);
  pinMode(soundLED,OUTPUaT);
  pinMode(LEDOFF, OUTPUaT);

  Serialbegin(9600); // initialize Serial communication

  CountdownInMillis = (SETminute*60 + SETsecond)*1000; // this calculates the corrispondent value in millis from the minutes and seconds setting
  lcdbegin(16, 2);     // LCD initialization
  lcdsetRGB(0, 0, 0);  // LCD RGB is OFF at the beginning

  // initialize device
  CurieIMUbegin();

  // Set the accelerometer range to 2G
  CurieIMUsetAccelerometerRange(2);

  // Enable Shock Detection
  CurieIMUsetDetectionThreshold(CURIE_IMU_SHOCK, 7000);  // 70g = 7000 mg  (this value set the intensity of the shock)
  CurieIMUsetDetectionDuration(CURIE_IMU_SHOCK, 2000);   // 2000ms (this value set the duration of the shock)
  CurieIMUinterrupts(CURIE_IMU_SHOCK);
}